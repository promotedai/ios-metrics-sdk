// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/promotion/promotion.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Promotion_Status: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownStatus // = 0
  case active // = 1
  case paused // = 2
  case archived // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownStatus
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownStatus
    case 1: self = .active
    case 2: self = .paused
    case 3: self = .archived
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownStatus: return 0
    case .active: return 1
    case .paused: return 2
    case .archived: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Promotion_Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Promotion_Status] = [
    .unknownStatus,
    .active,
    .paused,
    .archived,
  ]
}

#endif  // swift(>=4.2)

public enum Promotion_BidType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownBidType // = 0
  case cpm // = 1
  case cpc // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownBidType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownBidType
    case 1: self = .cpm
    case 2: self = .cpc
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownBidType: return 0
    case .cpm: return 1
    case .cpc: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Promotion_BidType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Promotion_BidType] = [
    .unknownBidType,
    .cpm,
    .cpc,
  ]
}

#endif  // swift(>=4.2)

/// Status status = 1;
public struct Promotion_Platform {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Status status = 1;
public struct Promotion_Customer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Promotion_Account {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Status status = 1;
  public var currencyCode: Common_CurrencyCode = .unknownCurrencyCode

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Status status = 1;
public struct Promotion_Campaign {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Promotion_Content {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Status status = 1;
  public var externalContentID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Promotion_Promotion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Status status = 1;
  public var content: Promotion_Content {
    get {return _content ?? Promotion_Content()}
    set {_content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  public var hasContent: Bool {return self._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  public mutating func clearContent() {self._content = nil}

  public var bidType: Promotion_BidType = .unknownBidType

  public var bidAmount: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _content: Promotion_Content? = nil
}

public struct Promotion_FlatPromotion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var entityPath: Common_EntityPath {
    get {return _entityPath ?? Common_EntityPath()}
    set {_entityPath = newValue}
  }
  /// Returns true if `entityPath` has been explicitly set.
  public var hasEntityPath: Bool {return self._entityPath != nil}
  /// Clears the value of `entityPath`. Subsequent reads from it will return its default value.
  public mutating func clearEntityPath() {self._entityPath = nil}

  /// Platform platform = 2;
  /// Customer customer = 3;
  public var account: Promotion_Account {
    get {return _account ?? Promotion_Account()}
    set {_account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  public var hasAccount: Bool {return self._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  public mutating func clearAccount() {self._account = nil}

  /// Campaign campaign = 5;
  public var promotion: Promotion_Promotion {
    get {return _promotion ?? Promotion_Promotion()}
    set {_promotion = newValue}
  }
  /// Returns true if `promotion` has been explicitly set.
  public var hasPromotion: Bool {return self._promotion != nil}
  /// Clears the value of `promotion`. Subsequent reads from it will return its default value.
  public mutating func clearPromotion() {self._promotion = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _entityPath: Common_EntityPath? = nil
  fileprivate var _account: Promotion_Account? = nil
  fileprivate var _promotion: Promotion_Promotion? = nil
}

/// This proto gets inserted in a temporary Redis DB between the serving system
/// and the event system to pass along info we don't want to pass externally.
public struct Promotion_InsertionLogFlatPromotion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Even though this only has one field, we'll keep a wrapper message in case
  /// we want to add other serving info that we do not want in FlatPromotion.
  public var flatPromotion: Promotion_FlatPromotion {
    get {return _flatPromotion ?? Promotion_FlatPromotion()}
    set {_flatPromotion = newValue}
  }
  /// Returns true if `flatPromotion` has been explicitly set.
  public var hasFlatPromotion: Bool {return self._flatPromotion != nil}
  /// Clears the value of `flatPromotion`. Subsequent reads from it will return its default value.
  public mutating func clearFlatPromotion() {self._flatPromotion = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _flatPromotion: Promotion_FlatPromotion? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "promotion"

extension Promotion_Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_STATUS"),
    1: .same(proto: "ACTIVE"),
    2: .same(proto: "PAUSED"),
    3: .same(proto: "ARCHIVED"),
  ]
}

extension Promotion_BidType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_BID_TYPE"),
    1: .same(proto: "CPM"),
    2: .same(proto: "CPC"),
  ]
}

extension Promotion_Platform: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Platform"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Promotion_Platform, rhs: Promotion_Platform) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Promotion_Customer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Customer"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Promotion_Customer, rhs: Promotion_Customer) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Promotion_Account: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Account"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "currency_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularEnumField(value: &self.currencyCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.currencyCode != .unknownCurrencyCode {
      try visitor.visitSingularEnumField(value: self.currencyCode, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Promotion_Account, rhs: Promotion_Account) -> Bool {
    if lhs.currencyCode != rhs.currencyCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Promotion_Campaign: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Campaign"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Promotion_Campaign, rhs: Promotion_Campaign) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Promotion_Content: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Content"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "external_content_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.externalContentID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.externalContentID.isEmpty {
      try visitor.visitSingularStringField(value: self.externalContentID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Promotion_Content, rhs: Promotion_Content) -> Bool {
    if lhs.externalContentID != rhs.externalContentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Promotion_Promotion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Promotion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "content"),
    3: .standard(proto: "bid_type"),
    4: .standard(proto: "bid_amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularMessageField(value: &self._content) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.bidType) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.bidAmount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._content {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.bidType != .unknownBidType {
      try visitor.visitSingularEnumField(value: self.bidType, fieldNumber: 3)
    }
    if self.bidAmount != 0 {
      try visitor.visitSingularDoubleField(value: self.bidAmount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Promotion_Promotion, rhs: Promotion_Promotion) -> Bool {
    if lhs._content != rhs._content {return false}
    if lhs.bidType != rhs.bidType {return false}
    if lhs.bidAmount != rhs.bidAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Promotion_FlatPromotion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FlatPromotion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entity_path"),
    4: .same(proto: "account"),
    6: .same(proto: "promotion"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._entityPath) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._account) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._promotion) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._entityPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._promotion {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Promotion_FlatPromotion, rhs: Promotion_FlatPromotion) -> Bool {
    if lhs._entityPath != rhs._entityPath {return false}
    if lhs._account != rhs._account {return false}
    if lhs._promotion != rhs._promotion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Promotion_InsertionLogFlatPromotion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InsertionLogFlatPromotion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "flat_promotion"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._flatPromotion) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._flatPromotion {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Promotion_InsertionLogFlatPromotion, rhs: Promotion_InsertionLogFlatPromotion) -> Bool {
    if lhs._flatPromotion != rhs._flatPromotion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
