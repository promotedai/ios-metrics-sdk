import Foundation

/** Represents a unit of trackable content in your marketplace. */
@objc(PROContent)
public class Content: NSObject {
  /// Human-readable identifier. Debug-only.
  @objc public var name: String?

  /// Unique ID for this content. Can be an internal ID from your system.
  @objc public var contentID: String?

  /// Insertion ID as generated by Promoted.
  @objc public var insertionID: String?
  
  /// Initializes with nil `contentID` and nil `insertionID`.
  @objc public convenience override init() {
    self.init(name: nil, contentID: nil, insertionID: nil)
  }
  
  /// Initializes with the given `contentID` and nil `insertionID`.
  @objc public convenience init(contentID: String) {
    self.init(name: nil, contentID: contentID, insertionID: nil)
  }
  
  /// Initializes with the given `contentID` and `insertionID`.
  @objc public convenience init(contentID: String, insertionID: String) {
    self.init(name: nil, contentID: contentID, insertionID: insertionID)
  }
  
  public init(
    name: String? = nil,
    contentID: String? = nil,
    insertionID: String? = nil
  ) {
    self.name = name
    self.contentID = contentID
    self.insertionID = insertionID
  }

  /// Initializes with given dictionary as used to represent
  /// a piece of content, using the key arrays to read the dictionary.
  /// Primarily used to parse dictionaries from React Native.
  /// If the given properties do not contain any of the provided keys
  /// for a given attribute, then that attribute will be nil.
  ///
  /// - Parameters:
  ///   - properties: Dictionary of properties to read from.
  ///   - nameKeys: Keys used to read `name`, in preferred order.
  ///   - contentIDKeys: Keys used to read `contentID`, in preferred
  ///     order.
  ///   - insertionIDKeys: Keys used to read `insertionID`, in
  ///     preferred order.
  @objc public init(
    properties: [String: Any]?,
    nameKeys: [String],
    contentIDKeys: [String],
    insertionIDKeys: [String]
  ) {
    self.name = properties?.firstValueFromKeysInArray(nameKeys)
    self.contentID = properties?.firstValueFromKeysInArray(contentIDKeys)
    self.insertionID = properties?.firstValueFromKeysInArray(insertionIDKeys)
  }
}

public extension Content {
  override var description: String { debugDescription }

  override var debugDescription: String {
    var result = "("
    var separator = ""
    if let name = self.name {
      result += "name=\(name)"
      separator = ", "
    }
    if let contentID = self.contentID {
      result += "\(separator)contentID=\(contentID)"
      separator = ", "
    }
    if let insertionID = self.insertionID {
      result += "\(separator)insertionID=\(insertionID)"
    }
    result += ")"
    return result
  }
  
  override func isEqual(_ object: Any?) -> Bool {
    if let other = object as? Content {
      return self.contentID == other.contentID
    }
    return false
  }
  
  override var hash: Int { contentID?.hash ?? 0 }
}
