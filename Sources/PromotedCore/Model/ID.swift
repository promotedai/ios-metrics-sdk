import Foundation

/**
 Entity IDs used to set the `*_id` fields in events.
 Used internally to track metadata. External interfaces should
 only expose the string values of these IDs.
 */
enum ID: Equatable {

  /// For proto completeness, platform code shouldn't set this value.
  case unknown

  /// Explicitly set to null by platform code.
  case null

  /// Explicitly set to empty string by platform code.
  case empty

  /// Automatically generated by metrics library.
  case autogenerated(value: String)

  /// Set to a specific value by platform code.
  case platformSpecified(value: String)
}

extension ID {
  static func idForPlatformSpecifiedString(_ value: String?) -> ID {
    if let value = value {
      if value.isEmpty { return .empty }
      return .platformSpecified(value: value)
    }
    return .null
  }

  static func idForAutogeneratedString(_ value: String?) -> ID {
    if let value = value {
      if value.isEmpty { return .empty }
      return .autogenerated(value: value)
    }
    return .null
  }

  var protoValue: Event_IdentifierProvenance? {
    switch self {
    case .unknown: return .unknown
    case .null: return .null
    case .empty: return .empty
    case .autogenerated(_): return .autogenerated
    case .platformSpecified(_): return .platformSpecified
    }
  }

  var stringValue: String? {
    switch self {
    case .unknown, .null: return nil
    case .empty: return ""
    case .autogenerated(let value): return value
    case .platformSpecified(let value): return value
    }
  }
}

extension ID: CustomStringConvertible {
  public var description: String {
    switch self {
    case .unknown: return "unknown"
    case .null: return "null"
    case .empty: return "empty"
    case .autogenerated(let value): return "auto(\(value))"
    case .platformSpecified(let value): return "platformSpecified(\(value))"
    }
  }
}

func ==(lhs: ID, rhs: ID) -> Bool {
  switch (lhs, rhs) {
  case (.unknown, .unknown): return true
  case (.null, .null): return true
  case (.empty, .empty): return true
  case (.autogenerated(let a), .autogenerated(let b)): return a == b
  case (.platformSpecified(let a), .platformSpecified(let b)): return a == b
  default: return false
  }
}
