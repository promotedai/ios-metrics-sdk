import Foundation

/** Represents a saleable unit in your marketplace. */
@objc(PROItem)
public class Item: NSObject {

  /// Unique ID for this item. Can be an internal ID from your system.
  @objc public var itemID: String?

  /// Insertion ID as generated by Promoted.
  @objc public var insertionID: String?
  
  /// Initializes with nil `itemID` and nil `insertionID`.
  @objc public override init() {
    self.itemID = nil
    self.insertionID = nil
  }
  
  /// Initializes with the given `itemID` and nil `insertionID`.
  @objc public init(itemID: String) {
    self.itemID = itemID
    self.insertionID = nil
  }
  
  /// Initializes with the given `itemID` and `insertionID`.
  @objc public init(itemID: String, insertionID: String) {
    self.itemID = itemID
    self.insertionID = insertionID
  }
  
  /// Initializes with given dictionary as used to represent
  /// an item, using the key arrays to read the dictionary.
  /// If the given properties do not contain an item ID, `itemID`
  /// will be `nil`. If the properties do not contain an insertion
  /// ID, `insertionID` will be nil.
  ///
  /// - Parameters:
  ///   - properties: Dictionary of properties to read from.
  ///   - itemIDKeys: Keys used to read `itemID`, in preferred
  ///     order.
  ///   - insertionIDKeys: Keys used to read `insertionID`, in
  ///     preferred order.
  @objc public init(properties: [String: Any]?,
                    itemIDKeys: [String],
                    insertionIDKeys: [String]) {
    self.itemID = properties?.firstValueFromKeysInArray(itemIDKeys)
    self.insertionID = properties?.firstValueFromKeysInArray(insertionIDKeys)
  }
  
  public override func isEqual(_ object: Any?) -> Bool {
    if let other = object as? Item {
      return self.itemID == other.itemID
    }
    return false
  }
  
  public override var hash: Int {
    return itemID?.hash ?? 0
  }
}
