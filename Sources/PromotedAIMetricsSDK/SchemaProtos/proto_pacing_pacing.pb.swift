// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/pacing/pacing.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Pacing_Account {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Status status = 1; ?
  public var currencyCode: Common_CurrencyCode = .unknownCurrencyCode

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Pacing_Campaign {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Status status = 1; ?
  public var dailyBudgetAmount: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Pacing_FlatPacingCampaign {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var entityPath: Common_EntityPath {
    get {return _entityPath ?? Common_EntityPath()}
    set {_entityPath = newValue}
  }
  /// Returns true if `entityPath` has been explicitly set.
  public var hasEntityPath: Bool {return self._entityPath != nil}
  /// Clears the value of `entityPath`. Subsequent reads from it will return its default value.
  public mutating func clearEntityPath() {self._entityPath = nil}

  /// Platform platform = 2;
  /// Customer customer = 3;
  public var account: Pacing_Account {
    get {return _account ?? Pacing_Account()}
    set {_account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  public var hasAccount: Bool {return self._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  public mutating func clearAccount() {self._account = nil}

  public var campaign: Pacing_Campaign {
    get {return _campaign ?? Pacing_Campaign()}
    set {_campaign = newValue}
  }
  /// Returns true if `campaign` has been explicitly set.
  public var hasCampaign: Bool {return self._campaign != nil}
  /// Clears the value of `campaign`. Subsequent reads from it will return its default value.
  public mutating func clearCampaign() {self._campaign = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _entityPath: Common_EntityPath? = nil
  fileprivate var _account: Pacing_Account? = nil
  fileprivate var _campaign: Pacing_Campaign? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "pacing"

extension Pacing_Account: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Account"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "currency_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularEnumField(value: &self.currencyCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.currencyCode != .unknownCurrencyCode {
      try visitor.visitSingularEnumField(value: self.currencyCode, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Pacing_Account, rhs: Pacing_Account) -> Bool {
    if lhs.currencyCode != rhs.currencyCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pacing_Campaign: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Campaign"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "daily_budget_amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.dailyBudgetAmount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dailyBudgetAmount != 0 {
      try visitor.visitSingularDoubleField(value: self.dailyBudgetAmount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Pacing_Campaign, rhs: Pacing_Campaign) -> Bool {
    if lhs.dailyBudgetAmount != rhs.dailyBudgetAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pacing_FlatPacingCampaign: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FlatPacingCampaign"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entity_path"),
    4: .same(proto: "account"),
    5: .same(proto: "campaign"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._entityPath) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._account) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._campaign) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._entityPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._campaign {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Pacing_FlatPacingCampaign, rhs: Pacing_FlatPacingCampaign) -> Bool {
    if lhs._entityPath != rhs._entityPath {return false}
    if lhs._account != rhs._account {return false}
    if lhs._campaign != rhs._campaign {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
